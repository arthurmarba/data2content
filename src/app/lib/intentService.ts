// @/app/lib/intentService.ts ‚Äì v2.18.6 (Fun√ß√£o de Confirma√ß√£o Simples para Interrup√ß√£o)
// - ADICIONADO: Nova fun√ß√£o `isSimpleConfirmationOrAcknowledgement` para uso na l√≥gica de interrup√ß√£o.
// - OTIMIZADO: `quickSpecialHandle` agora usa consistentemente o primeiro nome do usu√°rio em todas as respostas de sauda√ß√£o.
// - Mant√©m funcionalidades e logging da v2.18.4.
// --------------------------------------------------

import { logger } from '@/app/lib/logger';
import { IUser, IUserPreferences }  from '@/app/models/User';
import { IDialogueState } from './stateService'; // Presume que IDialogueState est√° em stateService.ts

/* -------------------------------------------------- *
 * Tipagens internas
 * -------------------------------------------------- */
export type DeterminedIntent =
  | 'script_request'
  | 'content_plan'
  | 'ranking_request'
  | 'general'
  | 'report'
  | 'content_ideas'
  | 'greeting'
  | 'clarification_follow_up'
  | 'proactive_script_accept'
  | 'proactive_script_reject'
  | 'ASK_BEST_PERFORMER'
  | 'ASK_BEST_TIME'
  | 'social_query'
  | 'meta_query_personal'
  | 'user_confirms_pending_action'
  | 'user_denies_pending_action'
  | 'generate_proactive_alert'
  | 'ask_community_inspiration'
  | 'user_stated_preference'
  | 'user_shared_goal'
  | 'user_mentioned_key_fact'
  | 'user_requests_memory_update';

interface ExtractedPreferenceDetail {
  field: keyof IUserPreferences;
  value: string;
  rawValue?: string;
}

export type IntentResult =
  | {
      type: 'intent_determined';
      intent: DeterminedIntent;
      pendingActionContext?: any;
      extractedPreference?: ExtractedPreferenceDetail;
      extractedGoal?: string;
      extractedFact?: string;
      memoryUpdateRequestContent?: string;
    }
  | { type: 'special_handled'; response: string };

/* -------------------------------------------------- *
 * Listas de keywords
 * -------------------------------------------------- */
const SCRIPT_KEYWORDS: string[] = [
  'roteiro','script','estrutura','outline','sequencia',
  'escreve pra mim','como fazer video sobre','estrutura de post','roteiriza'
];
const CONTENT_PLAN_KEYWORDS: string[] = [
  'planejamento','plano de conteudo','agenda de posts','calendario editorial',
  'o que postar essa semana','sugestao de agenda','me da um plano','cria um plano'
];
const RANKING_KEYWORDS: string[] = [
  'ranking','rank','melhores','piores','top','quais sao os','lista de'
];
const REPORT_KEYWORDS: string[] = [
  'relatorio','plano','estrat√©gia','detalhado','completo','performance',
  'analisa','analise','vis√£o geral','resultado','resultados','desempenho'
];
const CONTENT_IDEAS_KEYWORDS: string[] = [
  'ideia','ideias','conte√∫do','sugest√£o de post','sugest√µes de post','sugere',
  'sugest√£o','o que postar','inspira√ß√£o','exemplos de posts','dicas de conte√∫do',
  'ideias criativas'
];
const COMMUNITY_INSPIRATION_KEYWORDS: string[] = [
  'inspira√ß√£o', 'inspira√ß√µes', 'exemplos de posts', 'ideias da comunidade',
  'posts de outros criadores', 'ver o que outros fizeram', 'refer√™ncias da comunidade',
  'community inspiration', 'preciso de uma luz', 'me d√° uma refer√™ncia',
  'exemplos da comunidade', 'conte√∫do da comunidade', 'mostra exemplos',
  'quero ver exemplos', 'exemplos de sucesso'
];
const ASK_BEST_PERFORMER_KEYWORDS: string[] = [
  'qual tipo','qual conteudo','qual proposta','qual contexto','gera mais',
  'melhor desempenho','maior desempenho','recordista em','performam melhor',
  'quais dao mais','o que da mais'
];
const BEST_TIME_KEYWORDS: string[] = [
  'melhor dia','melhor hora','melhor horario','qual dia','qual hora',
  'qual horario','quando postar','frequencia','cadencia'
];
const GREETING_KEYWORDS: string[] = [
  'oi','ol√°','ola','tudo bem','bom dia','boa tarde','boa noite','e a√≠','eae', 'opa', 'fala'
];
const FAREWELL_KEYWORDS: string[] = [
  'tchau', 'adeus', 'at√© mais', 'ate logo', 'falou', 'fui', 'at√© amanh√£', 'desligar'
];
const SOCIAL_QUERY_KEYWORDS: string[] = [
  'amigo', 'amiga', 'gosta de mim', 'sozinho', 'sozinha', 'sentimento', 'sente', 'triste', 'feliz',
  'namorado', 'namorada', 'casado', 'solteiro', 'como voce esta se sentindo', 'voce esta bem',
  'quer ser meu', 'quer sair', 'vamos conversar sobre', 'minha vida'
];
const META_QUERY_PERSONAL_KEYWORDS: string[] = [
  'quem √© voce', 'voce √© um robo', 'quem te criou', 'qual seu proposito', 'voce √© real', 'inteligencia artificial',
  'voce pensa', 'voce sonha', 'voce dorme', 'onde voce mora', 'qual sua idade', 'seu nome √© tuca', 'por que tuca',
  'voce √© o tuca', 'fale sobre voce'
];
const AFFIRMATIVE_KEYWORDS: string[] = [
  'sim', 's', 'pode ser', 'pode', 'claro', 'com certeza', 'quero', 'manda', 'ok', 'dale', 'bora', 'positivo', 'afirmativo', 'isso', 'exato', 'aham', 'uhum'
];
const NEGATIVE_KEYWORDS: string[] = [
  'n√£o', 'nao', 'n', 'agora n√£o', 'deixa pra depois', 'depois', 'outra hora', 'negativo', 'nada', 'nem', 'nunca'
];

const USER_REQUESTS_MEMORY_UPDATE_KEYWORDS: string[] = [
    'lembre-se que', 'lembre que', 'anote que', 'anota a√≠ que', 'guarde que', 'salve que', 'memorize que', 'lembrar que',
    'anotar que', 'salvar que', 'n√£o esque√ßa que', 'quero que voce lembre que'
];
const USER_PREFERENCE_HINT_KEYWORDS: string[] = ['prefiro', 'gosto de', 'n√£o gosto de', 'odeio', 'meu tom', 'formato', 'evito falar'];
const USER_GOAL_HINT_KEYWORDS: string[] = ['meu objetivo √©', 'minha meta √©', 'quero alcan√ßar', 'pretendo', 'almejo', 'meu foco √©', 'planejo'];
const USER_FACT_HINT_KEYWORDS: string[] = ['fato sobre mim', 'importante saber', 'minha empresa', 'trabalho com', 'sou de', 'moro em', 'para que voce saiba mais sobre mim'];

// NOVA LISTA: Keywords para confirma√ß√£o/reconhecimento simples
const SIMPLE_CONFIRMATION_ACK_KEYWORDS: string[] = [
    'ok', 'okay', 'sim', 's', 'entendi', 'entendido', 'certo', 'combinado', 'perfeito', 'justo',
    'aguardando', 'esperando', 'no aguardo',
    'valeu', 'obrigado', 'obrigada', 'grato', 'grata', 'show', 'blz', 'beleza', 'pode crer',
    'üëç', 'üëå', // Emojis podem ser mais dif√≠ceis de normalizar/capturar consistentemente
    'recebido', 'anotado', 'confirmado', 'positivo', 'afirmativo', 'isso', 'exato', 'aham', 'uhum',
    'pode ser', 'pode', 'claro', 'com certeza', 'quero', 'manda', 'dale', 'bora'
    // Adicionar 't√°', 'ta bom'
];


/* -------------------------------------------------- *
 * Utilidades
 * -------------------------------------------------- */
const normalize = (s: string) =>
  s.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');

const toNormSet = (arr: string[]) => new Set(arr.map(normalize));

const N_SCRIPT_KW    = toNormSet(SCRIPT_KEYWORDS);
const N_PLAN_KW      = toNormSet(CONTENT_PLAN_KEYWORDS);
const N_RANK_KW      = toNormSet(RANKING_KEYWORDS);
const N_REPORT_KW    = toNormSet(REPORT_KEYWORDS);
const N_IDEAS_KW     = toNormSet(CONTENT_IDEAS_KEYWORDS);
const N_COMMUNITY_INSP_KW = toNormSet(COMMUNITY_INSPIRATION_KEYWORDS);
const N_BEST_PERF_KW = toNormSet(ASK_BEST_PERFORMER_KEYWORDS);
const N_BEST_TIME_KW = toNormSet(BEST_TIME_KEYWORDS);
const N_GREET_KW     = toNormSet(GREETING_KEYWORDS);
const N_FAREWELL_KW  = toNormSet(FAREWELL_KEYWORDS);
const N_SOCIAL_KW    = toNormSet(SOCIAL_QUERY_KEYWORDS);
const N_META_KW      = toNormSet(META_QUERY_PERSONAL_KEYWORDS);
const N_AFFIRM_KW    = toNormSet(AFFIRMATIVE_KEYWORDS); // Mantido para isSimpleAffirmative
const N_NEG_KW       = toNormSet(NEGATIVE_KEYWORDS);   // Mantido para isSimpleNegative
const N_USER_MEM_UPDATE_KW = toNormSet(USER_REQUESTS_MEMORY_UPDATE_KEYWORDS);
const N_SIMPLE_CONFIRM_ACK_KW = toNormSet(SIMPLE_CONFIRMATION_ACK_KEYWORDS); // Novo Set

const includesKw = (txt: string, kwSet: Set<string>) =>
  [...kwSet].some((kw) => txt.includes(kw));

const pickRandom = <T>(arr: T[]): T => {
  if (arr.length === 0) throw new Error('pickRandom: array vazio');
  const idx = Math.floor(Math.random() * arr.length);
  const item = arr[idx];
  if (item === undefined) throw new Error('pickRandom: item indefinido');
  return item;
};

/* -------------------------------------------------- *
 * Helpers de inten√ß√£o
 * -------------------------------------------------- */
const isPlanRequest     = (txt: string) => includesKw(txt, N_PLAN_KW);
const isScriptRequest   = (txt: string) => includesKw(txt, N_SCRIPT_KW);
const isRankingRequest  = (txt: string) => includesKw(txt, N_RANK_KW);
const isCommunityInspirationRequest = (txt: string) => includesKw(txt, N_COMMUNITY_INSP_KW);
const isIdeasRequest    = (txt: string) => {
    if (isCommunityInspirationRequest(txt)) return false;
    return includesKw(txt, N_IDEAS_KW);
};
const isReportRequest   = (txt: string) => includesKw(txt, N_REPORT_KW);
const isBestPerfRequest = (txt: string) => includesKw(txt, N_BEST_PERF_KW);
const isBestTimeRequest = (txt: string) => {
  if (txt.includes('melhores dias') || txt.includes('melhor dia')) return true;
  return includesKw(txt, N_BEST_TIME_KW);
};
const isSocialQueryRequest = (txt: string) => includesKw(txt, N_SOCIAL_KW);
const isMetaQueryRequest   = (txt: string) => includesKw(txt, N_META_KW);

function isGreetingOnly(norm: string): boolean {
  if (!includesKw(norm, N_GREET_KW)) return false;
  const words = norm.split(/\s+/);
  if (words.length > 4) return false;
  const nonGreetingWords = words.filter(w => !N_GREET_KW.has(w) && w.length > 2);
  return nonGreetingWords.length <= 1;
}

function isFarewellOnly(norm: string): boolean {
  if (!includesKw(norm, N_FAREWELL_KW)) return false;
  const words = norm.split(/\s+/);
  if (words.length > 3) return false;
  const nonFarewellWords = words.filter(w => !N_FAREWELL_KW.has(w));
  return nonFarewellWords.length === 0;
}

// isSimpleAffirmative e isSimpleNegative s√£o usados para responder a perguntas da IA (lastAIQuestionType)
function isSimpleAffirmative(norm: string): boolean {
    const words = norm.split(/\s+/);
    // Permite frases como "sim tuca" ou "pode sim"
    if (words.length <= 3 && words.some(w => N_AFFIRM_KW.has(w))) {
        // Verifica se as palavras n√£o afirmativas s√£o curtas ou nomes (como 'tuca')
        const nonAffirmativeWords = words.filter(w => !N_AFFIRM_KW.has(w));
        if (nonAffirmativeWords.every(w => w.length <= 4 || w === 'tuca')) { // Permite 'tuca' ou palavras curtas
            return true;
        }
    }
    return words.length <= 2 && N_AFFIRM_KW.has(norm); // L√≥gica original mais restrita
}

function isSimpleNegative(norm: string): boolean {
    const words = norm.split(/\s+/);
     // Permite frases como "n√£o tuca" ou "agora n√£o tuca"
    if (words.length <= 4 && words.some(w => N_NEG_KW.has(w))) {
        const nonNegativeWords = words.filter(w => !N_NEG_KW.has(w));
         if (nonNegativeWords.every(w => w.length <= 4 || w === 'tuca')) {
            return true;
        }
    }
    return words.length <= 3 && N_NEG_KW.has(norm); // L√≥gica original mais restrita
}

/**
 * NOVO (v2.18.6): Verifica se o texto √© uma confirma√ß√£o ou reconhecimento simples.
 * Usado para decidir se uma mensagem intercalada deve interromper um processamento em andamento.
 * @param normalizedText Texto normalizado da mensagem do usu√°rio.
 * @returns `true` se for uma confirma√ß√£o/reconhecimento simples, `false` caso contr√°rio.
 */
export function isSimpleConfirmationOrAcknowledgement(normalizedText: string): boolean {
    const TAG = '[intentService][isSimpleConfirmationOrAcknowledgement v2.18.6]';
    if (!normalizedText || normalizedText.trim() === '') {
        return false;
    }

    const words = normalizedText.split(/\s+/);
    const wordCount = words.length;

    // Crit√©rio 1: Mensagens muito curtas (1-2 palavras) que s√£o keywords diretas
    if (wordCount <= 2) {
        // Se todas as palavras estiverem no conjunto de confirma√ß√£o/ack
        if (words.every(word => N_SIMPLE_CONFIRM_ACK_KW.has(word))) {
            logger.debug(`${TAG} Texto "${normalizedText}" identificado como confirma√ß√£o/ack (curto, todas keywords).`);
            return true;
        }
    }

    // Crit√©rio 2: Mensagens um pouco mais longas (at√© 5 palavras)
    // onde a maioria s√£o keywords de confirma√ß√£o/ack
    // e n√£o h√° muitas palavras "estranhas" (que indicariam um novo pedido).
    if (wordCount <= 5) {
        const confirmationWords = words.filter(word => N_SIMPLE_CONFIRM_ACK_KW.has(word));
        const confirmationWordsCount = confirmationWords.length;
        
        // Palavras que N√ÉO s√£o de confirma√ß√£o e N√ÉO s√£o o nome "Tuca" (normalizado) e t√™m mais de 1 letra (para ignorar artigos, etc.)
        const nonConfirmationSignificantWords = words.filter(word => 
            !N_SIMPLE_CONFIRM_ACK_KW.has(word) && 
            word !== 'tuca' && // ignora 'tuca' normalizado
            word.length > 1
        );

        // Se pelo menos uma palavra de confirma√ß√£o estiver presente
        // E n√£o houver palavras significativas n√£o relacionadas √† confirma√ß√£o
        // Ex: "ok tuca", "valeu tuca", "sim tuca", "aguardando tuca"
        // Ex: "ok", "valeu", "sim", "aguardando"
        // Ex: "ok, estou aguardando" (ok, aguardando s√£o keywords)
        if (confirmationWordsCount > 0 && nonConfirmationSignificantWords.length === 0) {
            logger.debug(`${TAG} Texto "${normalizedText}" identificado como confirma√ß√£o/ack (keywords + opcionalmente 'tuca' ou palavras insignificantes).`);
            return true;
        }

        // Heur√≠stica: se a maioria das palavras s√£o de confirma√ß√£o e h√° no m√°ximo uma palavra "nova" significativa
        if (confirmationWordsCount >= Math.ceil(wordCount / 2) && nonConfirmationSignificantWords.length <= 1) {
             logger.debug(`${TAG} Texto "${normalizedText}" identificado como confirma√ß√£o/ack (maioria keywords, <=1 palavra nova significativa).`);
            return true;
        }
    }
    
    // Crit√©rio 3: Frases que come√ßam com "estou/to" + keyword de aguardo (com at√© 3 palavras no total)
    // Ex: "estou aguardando", "to no aguardo"
    if (wordCount <= 3 && (normalizedText.startsWith('estou ') || normalizedText.startsWith('to '))) {
        const remainingTextFirstWord = words[1]; // A palavra ap√≥s "estou" ou "to"
        if (remainingTextFirstWord && N_SIMPLE_CONFIRM_ACK_KW.has(remainingTextFirstWord)) {
            logger.debug(`${TAG} Texto "${normalizedText}" identificado como confirma√ß√£o/ack (in√≠cio com "estou/to" + keyword).`);
            return true;
        }
    }

    logger.debug(`${TAG} Texto "${normalizedText}" N√ÉO identificado como confirma√ß√£o/ack simples.`);
    return false;
}


/**
 * Tenta extrair uma declara√ß√£o de prefer√™ncia do usu√°rio.
 */
function detectUserPreference(normalizedText: string, rawText: string): { isMatch: boolean; extractedPreference?: ExtractedPreferenceDetail } {
    const TAG = '[intentService][detectUserPreference v2.18.6]'; // Vers√£o atualizada no log
    // logger.debug(`${TAG} Checking for user preference. Raw text: "${rawText.substring(0,100)}"`); // Log j√° existe na v2.18.5
    let match;

    const toneRegex = /(?:(?:prefiro|gosto\s+de|meu)(?:\s+um)?\s+tom(?:\s+√©)?|tom\s+da\s+ia(?:\s+√©)?)\s+(mais\s+formal|direto\s+ao\s+ponto|super\s+descontra[i√≠]do|formal|descontra[i√≠]do|direto)/i;
    match = rawText.match(toneRegex);
    if (match && match[1]) {
        const toneValueRaw = match[1].trim();
        const toneValueNormalized = normalize(toneValueRaw);
        let finalTone: IUserPreferences['preferredAiTone'] = 'direto_ao_ponto';
        if (toneValueNormalized.includes('mais formal') || toneValueNormalized === 'formal') finalTone = 'mais_formal';
        else if (toneValueNormalized.includes('direto ao ponto') || toneValueNormalized === 'direto') finalTone = 'direto_ao_ponto';
        else if (toneValueNormalized.includes('super descontrai') || toneValueNormalized.includes('descontraido')) finalTone = 'super_descontraido';
        logger.info(`${TAG} Prefer√™ncia de tom detectada: ${finalTone} (Raw: ${toneValueRaw})`);
        return { isMatch: true, extractedPreference: { field: 'preferredAiTone', value: finalTone, rawValue: toneValueRaw } };
    }

    const formatRegex = /(?:(?:eu|eu\s+realmente|eu\s+tamb√©m)\s+)?(?:prefiro|gosto(?:\s+mais)?\s+de|queria|quero|adoro|amo|curto)\s+(reels|v√≠deos?\s+longos?|v√≠deos?\s+curtos?|posts?\s+de\s+imagem|carrossel|stories|conte√∫do\s+em\s+v√≠deo|postagens\s+escritas|artigos)/i;
    match = rawText.match(formatRegex);
    if (match && match[1]) {
        const formatValue = match[1].trim();
        logger.info(`${TAG} Prefer√™ncia de formato detectada: ${formatValue}`);
        return { isMatch: true, extractedPreference: { field: 'preferredFormats', value: formatValue, rawValue: formatValue } };
    }

    const dislikedTopicRegex = /(?:(?:eu\s+)?(?:n(?:√£|a)o\s+gosto\s+de|n(?:√£|a)o\s+quero)\s+(?:falar\s+sobre|abordar|discutir|postar\s+sobre|criar\s+sobre)|(?:tuca(?:,\s*)?)?(?:por\s+favor(?:,\s*)?)?evite\s+(?:falar\s+sobre|abordar|discutir|postar\s+sobre|criar\s+sobre)|detesto|odeio)\s+(pol[i√≠]tica|esportes|futebol|religi[a√£]o|finan[c√ß]as(?: pessoais)?|tecnologia|games|jogos|viagens?|reality\s+shows?)/i;
    match = rawText.match(dislikedTopicRegex);
    if (match && match[1]) {
        const dislikedValue = match[1].trim();
        logger.info(`${TAG} T√≥pico n√£o gostado detectado: ${dislikedValue}`);
        return { isMatch: true, extractedPreference: { field: 'dislikedTopics', value: dislikedValue, rawValue: dislikedValue } };
    }
    // logger.debug(`${TAG} No user preference detected for raw text: "${rawText.substring(0,100)}"`); // Log j√° existe na v2.18.5
    return { isMatch: false };
}

/**
 * Tenta extrair um objetivo de longo prazo do usu√°rio.
 */
function detectUserGoal(normalizedText: string, rawText: string): { isMatch: boolean; extractedGoal?: string } {
    const TAG = '[intentService][detectUserGoal v2.18.6]'; // Vers√£o atualizada no log
    // logger.debug(`${TAG} Checking for user goal. Raw text: "${rawText.substring(0,100)}"`); // Log j√° existe na v2.18.5
    const lowerRawText = rawText.toLowerCase();
    const goalKeywordsAndPhrases: string[] = [
        "meu objetivo principal √©", "meu objetivo principal √© de", "meu objetivo √©", "meu objetivo de",
        "minha meta principal √©", "minha meta √©", "minha meta de",
        "quero alcan√ßar", "quero atingir", "quero conseguir",
        "pretendo", "almejo", "meu foco √©", "meu foco principal √©",
        "o que eu quero √©", "o que eu realmente quero √©",
        "busco", "estou trabalhando para", "planejo", "meu plano √©"
    ];

    for (const keyword of goalKeywordsAndPhrases) {
        const normalizedKeyword = normalize(keyword);
        if (normalizedText.startsWith(normalizedKeyword + " ")) {
            let potentialGoal = rawText.substring(keyword.length).trim();
            // logger.debug(`${TAG} Keyword "${keyword}" matched via startsWith. Potential goal: "${potentialGoal}"`); // Log j√° existe na v2.18.5
            if (potentialGoal.length > 5 && !normalize(potentialGoal).startsWith("que voce") && !normalize(potentialGoal).startsWith("voce") && potentialGoal.split(/\s+/).length >= 2) {
                logger.info(`${TAG} Goal detected via startsWith ("${keyword}"): "${potentialGoal}"`);
                return { isMatch: true, extractedGoal: potentialGoal };
            } else {
                // logger.debug(`${TAG} Potential goal via startsWith ("${keyword}") did not meet criteria...`); // Log j√° existe na v2.18.5
            }
        }
    }

    const goalRegexFallback = new RegExp(`(?:${USER_GOAL_HINT_KEYWORDS.join('|')})\\s+([\\w\\s√Ä-√ñ√ò-√∂√∏-√ø.,'-]+)`, 'i');
    const match = rawText.match(goalRegexFallback);
    // logger.debug(`${TAG} Checking with fallback regex. Regex match result: ${JSON.stringify(match)}`); // Log j√° existe na v2.18.5

    if (match && match[1]) {
        const goalDescription = match[1].trim();
        // logger.debug(`${TAG} Fallback regex matched. Group 1: "${match[1]}", Trimmed: "${goalDescription}", Length: ${goalDescription.length}`); // Log j√° existe na v2.18.5
        if (goalDescription.length > 5 && !normalize(goalDescription).startsWith("que voce") && !normalize(goalDescription).startsWith("voce") && goalDescription.split(/\s+/).length >= 2) {
            logger.info(`${TAG} Goal detected via fallback regex: "${goalDescription}"`);
            return { isMatch: true, extractedGoal: goalDescription };
        } else {
            // logger.debug(`${TAG} Goal description via fallback regex too short or starts with 'voc√™'.`); // Log j√° existe na v2.18.5
        }
    }
    // logger.debug(`${TAG} No goal detected for raw text: "${rawText.substring(0,100)}"`); // Log j√° existe na v2.18.5
    return { isMatch: false };
}

/**
 * Tenta extrair um fato chave mencionado pelo usu√°rio.
 */
function detectUserKeyFact(normalizedText: string, rawText: string): { isMatch: boolean; extractedFact?: string } {
    const TAG = '[intentService][detectUserKeyFact v2.18.6]'; // Vers√£o atualizada no log
    // logger.debug(`${TAG} Checking for key fact. Raw text: "${rawText.substring(0,100)}"`); // Log j√° existe na v2.18.5
    const factRegex = /(?:(?:um\s+)?fato\s+(?:importante\s+)?(?:sobre\s+mim|a\s+meu\s+respeito)\s+(?:√©\s+que)?|s√≥\s+para\s+(?:voc√™|vc)\s+saber,?|para\s+sua\s+informa[c√ß][a√£]o,?|para\s+que\s+(?:voc[√™e]|vc)\s+saiba\s+(?:mais\s+)?sobre\s+mim,?|gostaria\s+de\s+compartilhar\s+que|√©\s+importante\s+dizer\s+que|eu\s+trabalho\s+com|minha\s+especialidade\s+√©\s+em|sou\s+(?:formado|formada|especialista)\s+em|moro\s+em|minha\s+empresa\s+(?:√©|se\s+chama)|meu\s+nicho\s+√©)\s+([\s\S]+)/i;
    const match = rawText.match(factRegex);
    // logger.debug(`${TAG} Regex match result: ${JSON.stringify(match)}`); // Log j√° existe na v2.18.5

    if (match && match[1]) {
        const factDescription = match[1].trim();
        // logger.debug(`${TAG} Regex matched. Group 1: "${match[1]}", Trimmed: "${factDescription}", Length: ${factDescription.length}`); // Log j√° existe na v2.18.5
        if (factDescription.length > 5 && !normalize(factDescription).startsWith("que voce") && !normalize(factDescription).startsWith("voce") && factDescription.split(/\s+/).length >= 2) {
            logger.info(`${TAG} Key fact detected: "${factDescription}"`);
            return { isMatch: true, extractedFact: factDescription };
        } else {
             // logger.debug(`${TAG} Fact description via regex too short, starts with 'voc√™', or not enough words.`); // Log j√° existe na v2.18.5
        }
    }
    // logger.debug(`${TAG} No key fact detected for raw text: "${rawText.substring(0,100)}"`); // Log j√° existe na v2.18.5
    return { isMatch: false };
}

/**
 * Detecta se o usu√°rio est√° explicitamente pedindo para Tuca lembrar/anotar algo.
 */
function detectMemoryUpdateRequest(normalizedText: string, rawText: string): { isMatch: boolean; memoryUpdateRequestContent?: string } {
    const TAG = '[intentService][detectMemoryUpdateRequest v2.18.6]'; // Vers√£o atualizada no log
    // logger.debug(`${TAG} Checking for memory update request. Raw text: "${rawText.substring(0,100)}"`); // Log j√° existe na v2.18.5
    const requestKeywordsJoined = USER_REQUESTS_MEMORY_UPDATE_KEYWORDS.map(kw => kw.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')).join('|');
    const requestRegex = new RegExp(`(?:tuca(?:,\\s*)?)?(?:${requestKeywordsJoined})\\s+([\\s\\S]+)`, 'i');
    const match = rawText.match(requestRegex);
    // logger.debug(`${TAG} Regex match result: ${JSON.stringify(match)}`); // Log j√° existe na v2.18.5

    if (match && match[1]) {
        const content = match[1].trim();
        // logger.debug(`${TAG} Regex matched. Group 1: "${match[1]}", Trimmed: "${content}", Length: ${content.length}`); // Log j√° existe na v2.18.5
        if (content.length > 3 && content.split(/\s+/).length >= 1) {
            logger.info(`${TAG} Memory update request detected. Content: "${content}"`);
            return { isMatch: true, memoryUpdateRequestContent: content };
        } else {
            // logger.debug(`${TAG} Memory update request content too short or no words.`); // Log j√° existe na v2.18.5
        }
    }
    // logger.debug(`${TAG} No memory update request detected for raw text: "${rawText.substring(0,100)}"`); // Log j√° existe na v2.18.5
    return { isMatch: false };
}


/* -------------------------------------------------- *
 * CASOS ESPECIAIS R√ÅPIDOS
 * -------------------------------------------------- */
async function quickSpecialHandle(
  user: IUser,
  normalized: string,
  greeting: string
): Promise<IntentResult | null> {
  const TAG = '[intentService][quickSpecialHandle v2.18.6]'; // Vers√£o atualizada
  const userFirstName = user.name ? user.name.split(' ')[0]! : 'tudo bem'; // Adicionado '!' para asser√ß√£o de n√£o nulidade

  if (isGreetingOnly(normalized)) {
    logger.debug(`${TAG} Greeting detected.`);
    return {
      type: 'special_handled',
      response: pickRandom([
        `${greeting} Em que posso ajudar hoje?`,
        `${greeting} Como posso ser √∫til?`,
        `${greeting} Pronto para come√ßar o dia? Me diga o que precisa!`,
        `Opa, ${userFirstName}! Tudo certo? O que manda?`,
      ]),
    };
  }

  const thanksKeywords = ['obrigado','obrigada','valeu','show','thanks','vlw', 'thx', 'agradecido', 'agradecida', 'de nada', 'disponha'];
  const normalizedThanks = thanksKeywords.map(normalize);

  if (normalizedThanks.some(kw => normalized.startsWith(kw) && normalized.split(/\s+/).length <= 3 )) {
    logger.debug(`${TAG} Thanks detected.`);
    return {
      type: 'special_handled',
      response: pickRandom([
        'Disponha! üòä Se precisar de mais algo, √© s√≥ chamar.',
        'De nada! Qual o pr√≥ximo passo?',
        'üëç Fico √† disposi√ß√£o. Algo mais?',
        'Por nada! Sempre bom ajudar. Precisa de outra coisa?',
      ]),
    };
  }

  if (isFarewellOnly(normalized)) {
    logger.debug(`${TAG} Farewell detected.`);
    return {
      type: 'special_handled',
      response: pickRandom([
        'At√© mais! üëã',
        'Tchau, tchau! Se cuida!',
        'Falou! Precisando, estou por aqui.',
        `At√© a pr√≥xima, ${userFirstName}!`.trim(),
      ]),
    };
  }
  // logger.debug(`${TAG} No special quick handle matched.`); // Log j√° existe na v2.18.5
  return null;
}

/* -------------------------------------------------- *
 * FUN√á√ÉO PRINCIPAL (exportada)
 * -------------------------------------------------- */
export async function determineIntent(
  normalizedText : string,
  user           : IUser,
  rawText        : string,
  dialogueState  : IDialogueState,
  greeting       : string,
  userId         : string
): Promise<IntentResult> {
  const TAG = '[intentService.determineIntent v2.18.6]'; // Vers√£o atualizada
  // logger.info(`${TAG} User ${userId}: Analisando texto...`); // Log j√° existe na v2.18.5
  // logger.debug(`${TAG} User ${userId}: Estado do di√°logo: ${JSON.stringify(dialogueState)}`); // Log j√° existe na v2.18.5


  if (dialogueState.lastAIQuestionType) {
    // logger.debug(`${TAG} User ${userId}: Estado de di√°logo indica pergunta pendente...`); // Log j√° existe na v2.18.5
    if (isSimpleAffirmative(normalizedText)) {
      // logger.info(`${TAG} User ${userId}: Confirmou a√ß√£o pendente...`); // Log j√° existe na v2.18.5
      return { type: 'intent_determined', intent: 'user_confirms_pending_action', pendingActionContext: dialogueState.pendingActionContext };
    }
    if (isSimpleNegative(normalizedText)) {
      // logger.info(`${TAG} User ${userId}: Negou a√ß√£o pendente...`); // Log j√° existe na v2.18.5
      return { type: 'intent_determined', intent: 'user_denies_pending_action', pendingActionContext: dialogueState.pendingActionContext };
    }
    // logger.debug(`${TAG} User ${userId}: Resposta n√£o √© afirma√ß√£o/nega√ß√£o simples...`); // Log j√° existe na v2.18.5
  }

  const special = await quickSpecialHandle(user, normalizedText, greeting);
  if (special && special.type === 'special_handled') {
    // logger.info(`${TAG} User ${userId}: Inten√ß√£o especial resolvida...`); // Log j√° existe na v2.18.5
    return special;
  }

  const memoryUpdateRequest = detectMemoryUpdateRequest(normalizedText, rawText);
  if (memoryUpdateRequest.isMatch && memoryUpdateRequest.memoryUpdateRequestContent) {
    // logger.info(`${TAG} User ${userId}: Inten√ß√£o detectada: user_requests_memory_update...`); // Log j√° existe na v2.18.5
    return { type: 'intent_determined', intent: 'user_requests_memory_update', memoryUpdateRequestContent: memoryUpdateRequest.memoryUpdateRequestContent };
  }

  const userPreference = detectUserPreference(normalizedText, rawText);
  if (userPreference.isMatch && userPreference.extractedPreference) {
    // logger.info(`${TAG} User ${userId}: Inten√ß√£o detectada: user_stated_preference...`); // Log j√° existe na v2.18.5
    return { type: 'intent_determined', intent: 'user_stated_preference', extractedPreference: userPreference.extractedPreference };
  }

  const userGoal = detectUserGoal(normalizedText, rawText);
  if (userGoal.isMatch && userGoal.extractedGoal) {
    // logger.info(`${TAG} User ${userId}: Inten√ß√£o detectada: user_shared_goal...`); // Log j√° existe na v2.18.5
    return { type: 'intent_determined', intent: 'user_shared_goal', extractedGoal: userGoal.extractedGoal };
  }

  const userKeyFact = detectUserKeyFact(normalizedText, rawText);
  if (userKeyFact.isMatch && userKeyFact.extractedFact) {
    // logger.info(`${TAG} User ${userId}: Inten√ß√£o detectada: user_mentioned_key_fact...`); // Log j√° existe na v2.18.5
    return { type: 'intent_determined', intent: 'user_mentioned_key_fact', extractedFact: userKeyFact.extractedFact };
  }

  let intent: DeterminedIntent;

  if      (isBestTimeRequest(normalizedText)) intent = 'ASK_BEST_TIME';
  else if (isPlanRequest(normalizedText))     intent = 'content_plan';
  else if (isScriptRequest(normalizedText))   intent = 'script_request';
  else if (isBestPerfRequest(normalizedText)) intent = 'ASK_BEST_PERFORMER';
  else if (isCommunityInspirationRequest(normalizedText)) intent = 'ask_community_inspiration';
  else if (isIdeasRequest(normalizedText))    intent = 'content_ideas';
  else if (isRankingRequest(normalizedText))  intent = 'ranking_request';
  else if (isReportRequest(normalizedText))   intent = 'report';
  else if (isSocialQueryRequest(normalizedText)) {
    intent = 'social_query';
    // logger.debug(`${TAG} User ${userId}: Inten√ß√£o social query detectada.`); // Log j√° existe na v2.18.5
  }
  else if (isMetaQueryRequest(normalizedText)) {
    intent = 'meta_query_personal';
    // logger.debug(`${TAG} User ${userId}: Inten√ß√£o meta query pessoal detectada.`); // Log j√° existe na v2.18.5
  }
  else {
    intent = 'general';
    // logger.debug(`${TAG} User ${userId}: Nenhuma inten√ß√£o espec√≠fica detectada, fallback para 'general'.`); // Log j√° existe na v2.18.5
  }

  // logger.info(`${TAG} User ${userId}: Inten√ß√£o final determinada (n√£o-mem√≥ria ou fallback): ${intent}`); // Log j√° existe na v2.18.5
  return { type: 'intent_determined', intent };
}

/* -------------------------------------------------- *
 * Helpers expostos
 * -------------------------------------------------- */
export const normalizeText = normalize;

export function getRandomGreeting(userName?: string) {
  const namePart = userName ? userName : 'criador(a)';
  return pickRandom([
    `Oi ${namePart}!`,
    `Ol√° ${namePart}!`,
    `E a√≠, ${namePart}? Como vai?`,
    `Fala, ${namePart}! Tudo certo?`,
  ]);
}
