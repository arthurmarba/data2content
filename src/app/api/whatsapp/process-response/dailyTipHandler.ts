// src/app/api/whatsapp/process-response/dailyTipHandler.ts
// Vers√£o: v1.1.0 (Adiciona pergunta instigante √† mensagem padr√£o do Radar Tuca)
import { NextResponse } from 'next/server';
import { logger } from '@/app/lib/logger';
import { sendWhatsAppMessage } from '@/app/lib/whatsappService';
import { askLLMWithEnrichedContext } from '@/app/lib/aiOrchestrator';
import * as stateService from '@/app/lib/stateService';
import type { IDialogueState } from '@/app/lib/stateService'; // Importa√ß√£o expl√≠cita
import * as dataService from '@/app/lib/dataService';
import { IUser, IAlertHistoryEntry, AlertDetails } from '@/app/models/User';
import { ProcessRequestBody, DetectedEvent, EnrichedAIContext } from './types';
import ruleEngineInstance from '@/app/lib/ruleEngine'; 
import { 
    DEFAULT_RADAR_STREAM_READ_TIMEOUT_MS,
    // Constantes para perguntas instigantes
    INSTIGATING_QUESTION_MODEL,
    INSTIGATING_QUESTION_TEMP,
    INSTIGATING_QUESTION_MAX_TOKENS
} from '@/app/lib/constants';
// Importar callOpenAIForQuestion do aiService
import { callOpenAIForQuestion } from '@/app/lib/aiService';

const HANDLER_TAG_BASE = '[DailyTipHandler v1.1.0]'; // Tag de vers√£o atualizada

/**
 * Gera uma pergunta instigante para a mensagem padr√£o do Radar Tuca.
 * @param baseMessage A mensagem padr√£o "nenhum evento encontrado".
 * @param dialogueState O estado atual do di√°logo.
 * @param userId O ID do usu√°rio (para logging).
 * @param userName Nome do usu√°rio para personalizar o prompt.
 * @returns Uma promessa que resolve para a pergunta instigante (string) ou null.
 */
async function generateInstigatingQuestionForDefaultMessage(
    baseMessage: string, // A mensagem "nenhum evento not√°vel..."
    dialogueState: IDialogueState,
    userId: string,
    userName: string
): Promise<string | null> {
    const TAG = `${HANDLER_TAG_BASE}[generateInstigatingQuestionForDefaultMessage] User ${userId}:`;

    if (baseMessage.trim().endsWith('?')) {
        logger.debug(`${TAG} Mensagem base j√° termina com uma pergunta. Pulando.`);
        return null;
    }

    const conversationSummary = dialogueState.conversationSummary || 'Ainda n√£o conversamos muito.';
    const lastRadarAlertType = dialogueState.lastRadarAlertType || 'Nenhum alerta recente.';

    const prompt = `
Voc√™ √© Tuca, um consultor de IA especialista em Instagram, e est√° enviando uma mensagem proativa di√°ria para ${userName}.
Hoje, voc√™ n√£o encontrou nenhum alerta ou insight espec√≠fico muito urgente para compartilhar. Sua mensagem base foi:
"${baseMessage}"

Para tornar essa mensagem mais engajadora e incentivar ${userName} a interagir, formule UMA pergunta curta (1-2 frases), aberta e instigante (em portugu√™s brasileiro) que o convide a:
1. Explorar alguma funcionalidade geral do Tuca que ele talvez n√£o conhe√ßa.
2. Refletir sobre seus objetivos de conte√∫do atuais.
3. Pedir uma an√°lise de dados que n√£o seja um "alerta", mas que possa ser √∫til (ex: "Como foi o alcance dos seus √∫ltimos Reels?", "Quer ver um resumo do seu crescimento de seguidores este m√™s?").
4. Considerar um tipo de conte√∫do ou estrat√©gia que ele pode n√£o ter explorado recentemente.

A pergunta N√ÉO deve ser uma simples confirma√ß√£o. Deve genuinamente levar o usu√°rio a pensar e a querer usar o Tuca para investigar mais.
Evite perguntas que pare√ßam gen√©ricas demais ou que j√° tenham sido feitas recentemente (considere o resumo da conversa e o tipo do √∫ltimo alerta do radar, se houver).
Se, ap√≥s um esfor√ßo genu√≠no, n√£o conseguir pensar em uma pergunta instigante e √∫til que se encaixe bem ap√≥s a mensagem base, responda APENAS com a palavra "NO_QUESTION".

Contexto adicional:
- Resumo da conversa at√© agora: "${conversationSummary.substring(0, 500)}"
- Tipo do √∫ltimo alerta do radar (se houver): "${lastRadarAlertType}"

Pergunta instigante (ou "NO_QUESTION"):
`;

    try {
        logger.debug(`${TAG} Solicitando gera√ß√£o de pergunta instigante para mensagem padr√£o...`);
        const model = (typeof INSTIGATING_QUESTION_MODEL !== 'undefined' ? INSTIGATING_QUESTION_MODEL : process.env.INSTIGATING_QUESTION_MODEL) || 'gpt-3.5-turbo';
        const temperature = (typeof INSTIGATING_QUESTION_TEMP !== 'undefined' ? INSTIGATING_QUESTION_TEMP : Number(process.env.INSTIGATING_QUESTION_TEMP)) ?? 0.75; // Um pouco mais criativo
        const max_tokens = (typeof INSTIGATING_QUESTION_MAX_TOKENS !== 'undefined' ? INSTIGATING_QUESTION_MAX_TOKENS : Number(process.env.INSTIGATING_QUESTION_MAX_TOKENS)) || 90; // Um pouco mais de espa√ßo

        const questionText = await callOpenAIForQuestion(prompt, {
            model,
            temperature,
            max_tokens,
        });

        if (!questionText || questionText.trim().toUpperCase() === 'NO_QUESTION' || questionText.trim().length < 10) {
            logger.debug(`${TAG} Nenhuma pergunta instigante gerada para msg padr√£o ou "NO_QUESTION" recebido. Resposta: "${questionText}"`);
            return null;
        }

        logger.info(`${TAG} Pergunta instigante para msg padr√£o gerada: "${questionText.trim()}"`);
        return questionText.trim();

    } catch (error) {
        logger.error(`${TAG} Erro ao gerar pergunta instigante para msg padr√£o:`, error);
        return null;
    }
}


export async function handleDailyTip(payload: ProcessRequestBody): Promise<NextResponse> {
    const { userId } = payload;
    const handlerTAG = `${HANDLER_TAG_BASE} User ${userId}:`;
    logger.info(`${handlerTAG} Iniciando processamento do Radar Tuca com Motor de Regras...`);

    let userForRadar: IUser | null = null;
    let userPhoneForRadar: string | null | undefined;
    let dialogueStateForRadar: stateService.IDialogueState;

    try {
        userForRadar = await dataService.lookupUserById(userId);

        if (!userForRadar) {
            logger.warn(`${handlerTAG} Usu√°rio com ID ${userId} n√£o encontrado. Interrompendo Radar Tuca.`);
            return NextResponse.json({ success: true, message: "User not found for Radar Tuca." }, { status: 200 });
        }
        
        dialogueStateForRadar = await stateService.getDialogueState(userId);

        userPhoneForRadar = userForRadar.whatsappPhone;
        if (!userPhoneForRadar || !userForRadar.whatsappVerified) {
            logger.warn(`${handlerTAG} Usu√°rio ${userId} sem WhatsApp v√°lido/verificado. Interrompendo Radar Tuca.`);
            return NextResponse.json({ success: true, message: "User has no verified WhatsApp number for Radar Tuca." }, { status: 200 });
        }

        const userNameForRadar = userForRadar.name || 'voc√™';
        const userFirstNameForRadar = userNameForRadar.split(' ')[0]!;
        const today = new Date();
        let detectedEvent: DetectedEvent | null = null;

        logger.info(`${handlerTAG} Executando o motor de regras...`);
        
        try {
            detectedEvent = await ruleEngineInstance.runAllRules(userId, dialogueStateForRadar);
        } catch (engineError) {
            logger.error(`${handlerTAG} Erro ao executar o motor de regras:`, engineError);
            throw engineError; 
        }

        if (!detectedEvent) {
            logger.info(`${handlerTAG} Nenhum evento not√°vel detectado pelo motor de regras.`);
            let baseDefaultMessage = `Ol√° ${userFirstNameForRadar}, Tuca na √°rea! üëã Hoje dei uma olhada nos seus dados e n√£o identifiquei nenhum alerta novo ou insight muito espec√≠fico para destacar.`;
            
            // Gerar pergunta instigante para a mensagem padr√£o
            const instigatingQuestion = await generateInstigatingQuestionForDefaultMessage(
                baseDefaultMessage,
                dialogueStateForRadar,
                userId,
                userFirstNameForRadar
            );

            let finalDefaultMessageToSend = baseDefaultMessage;
            if (instigatingQuestion) {
                finalDefaultMessageToSend += `\n\n${instigatingQuestion}`;
            } else {
                // Fallback se nenhuma pergunta for gerada, para ainda tentar engajar
                finalDefaultMessageToSend += ` Mas que tal aproveitarmos para explorar algum dado espec√≠fico ou planejar seus pr√≥ximos conte√∫dos? √â s√≥ me dizer! üòâ`;
            }
            
            await sendWhatsAppMessage(userPhoneForRadar, finalDefaultMessageToSend);
            logger.info(`${handlerTAG} Mensagem padr√£o (com pergunta instigante, se houver) enviada.`);

            await stateService.updateDialogueState(userId, { lastInteraction: Date.now(), lastRadarAlertType: 'no_event_found_today' });
            
            try {
                const noEventDetails: AlertDetails = { 
                    reason: 'Nenhum evento detectado pelo motor de regras ou todos os tipos aplic√°veis j√° foram enviados recentemente/desabilitados.' 
                }; 

                await dataService.addAlertToHistory(userId, {
                    type: 'no_event_found_today',
                    date: today,
                    messageForAI: baseDefaultMessage, // Mensagem base para IA, se necess√°rio para outros contextos
                    finalUserMessage: finalDefaultMessageToSend, // Mensagem completa enviada ao usu√°rio
                    details: noEventDetails, 
                    userInteraction: { type: 'not_applicable', interactedAt: today }
                });
                logger.info(`${handlerTAG} Alerta 'no_event_found_today' registrado no hist√≥rico com mensagem completa.`);
            } catch (historyError) {
                logger.error(`${handlerTAG} Falha ao registrar 'no_event_found_today' no hist√≥rico:`, historyError);
            }
            return NextResponse.json({ success: true, message: "No notable event found by rule engine, default message sent." }, { status: 200 });
        }

        // ... (resto do c√≥digo para quando um evento √â detectado) ...
        // ESTA PARTE DO C√ìDIGO PERMANECE IGUAL √Ä VERS√ÉO ANTERIOR
        // E DEVE INCLUIR A L√ìGICA PARA GERAR UMA PERGUNTA INSTIGANTE AP√ìS A MENSAGEM DO ALERTA TAMB√âM

        logger.info(`${handlerTAG} Alerta tipo '${detectedEvent.type}' detectado pelo motor de regras. Detalhes: ${JSON.stringify(detectedEvent.detailsForLog)}`);
        
        await stateService.updateDialogueState(userId, { lastRadarAlertType: detectedEvent.type });
        
        const alertInputForAI = detectedEvent.messageForAI;
        logger.debug(`${handlerTAG} Input para IA (messageForAI): "${alertInputForAI}"`);

        // Pega o estado mais recente do di√°logo para o contexto da IA
        const currentDialogueStateForAI = await stateService.getDialogueState(userId);
        const enrichedContextForAI: EnrichedAIContext = {
            user: userForRadar, 
            historyMessages: [], // Alertas proativos geralmente n√£o usam hist√≥rico de chat direto para esta chamada
            dialogueState: currentDialogueStateForAI, 
            userName: userFirstNameForRadar
        };

        logger.info(`${handlerTAG} Solicitando √† LLM para gerar mensagem final do alerta.`);
        const { stream } = await askLLMWithEnrichedContext(
            enrichedContextForAI,
            alertInputForAI,
            'generate_proactive_alert' 
        );

        let finalAIResponse = "";
        const reader = stream.getReader();
        let streamReadTimeout: NodeJS.Timeout | null = setTimeout(() => {
            logger.warn(`${handlerTAG} Timeout (${DEFAULT_RADAR_STREAM_READ_TIMEOUT_MS}ms) lendo stream da IA.`);
            if (reader && streamReadTimeout) { 
                 reader.cancel().catch(e => logger.error(`${handlerTAG} Erro ao cancelar reader no timeout:`, e));
            }
            streamReadTimeout = null; 
        }, DEFAULT_RADAR_STREAM_READ_TIMEOUT_MS);

        try {
            while (true) {
                const result = await reader.read();
                if (streamReadTimeout === null && !result.done) { 
                    logger.warn(`${handlerTAG} Leitura do stream ap√≥s timeout. Interrompendo.`);
                    if (!reader.closed) { 
                        reader.cancel().catch(e => logger.error(`${handlerTAG} Erro ao cancelar reader p√≥s-timeout:`, e));
                    }
                    break;
                }
                if (result.done) break;
                const chunk: unknown = result.value;
                if (typeof chunk === 'string') {
                    finalAIResponse += chunk;
                } else if (chunk instanceof Uint8Array) {
                    finalAIResponse += new TextDecoder().decode(chunk);
                } else if (chunk !== undefined) { 
                    logger.warn(`${handlerTAG} Stream da IA retornou chunk de tipo inesperado: ${typeof chunk}`);
                }
            }
        } catch (readError) {
            if (!(readError instanceof Error && readError.name === 'AbortError' && streamReadTimeout === null)) {
                 logger.error(`${handlerTAG} Erro ao ler stream da IA:`, readError);
            } else {
                logger.info(`${handlerTAG} Leitura do stream cancelada por timeout.`);
            }
        } finally {
            if (streamReadTimeout) {
                clearTimeout(streamReadTimeout);
                streamReadTimeout = null; 
            }
        }
        
        if (!finalAIResponse.trim()) {
            logger.warn(`${handlerTAG} IA n√£o retornou conte√∫do para o alerta. Usando fallback.`);
            finalAIResponse = `Ol√° ${userFirstNameForRadar}! Radar Tuca aqui com uma observa√ß√£o sobre ${detectedEvent.type}: ${alertInputForAI} Que tal explorarmos isso juntos?`;
        }

        // Adicionar pergunta instigante √† mensagem do alerta tamb√©m
        const instigatingQuestionForAlert = await generateInstigatingQuestionForDefaultMessage( // Reutilizando a fun√ß√£o, mas poderia ser uma espec√≠fica para alertas
            finalAIResponse, // Basear a pergunta na resposta do alerta
            currentDialogueStateForAI, // Usar o estado de di√°logo atual
            userId,
            userFirstNameForRadar
        );

        let fullAlertMessageToUser = finalAIResponse;
        if (instigatingQuestionForAlert) {
            fullAlertMessageToUser += `\n\n${instigatingQuestionForAlert}`;
        }
        
        try {
            const newAlertEntry: IAlertHistoryEntry = {
                type: detectedEvent.type,
                date: today,
                messageForAI: alertInputForAI,
                finalUserMessage: fullAlertMessageToUser, // Salvar mensagem completa
                details: detectedEvent.detailsForLog, 
                userInteraction: { type: 'pending_interaction', interactedAt: today }
            };
            await dataService.addAlertToHistory(userId, newAlertEntry);
            logger.info(`${handlerTAG} Alerta tipo '${detectedEvent.type}' com mensagem final (e pergunta instigante, se houver) registrado no hist√≥rico.`);
        } catch (historySaveError) {
            logger.error(`${handlerTAG} Falha ao salvar alerta tipo '${detectedEvent.type}' com mensagem final no hist√≥rico:`, historySaveError);
        }

        await sendWhatsAppMessage(userPhoneForRadar, fullAlertMessageToUser);
        logger.info(`${handlerTAG} Alerta do Radar Tuca enviado para ${userPhoneForRadar}: "${fullAlertMessageToUser.substring(0, 100)}..."`);

        await stateService.updateDialogueState(userId, { lastInteraction: Date.now() });

        return NextResponse.json({ success: true, message: `Radar Tuca alert '${detectedEvent.type}' processed by rule engine.` }, { status: 200 });

    } catch (error) {
        logger.error(`${handlerTAG} Erro GERAL ao processar Radar Tuca para User ${userId}:`, error);
        
        if (userPhoneForRadar && userForRadar) { 
            try {
                await sendWhatsAppMessage(userPhoneForRadar, "Desculpe, n√£o consegui gerar seu alerta di√°rio do Radar Tuca hoje devido a um erro interno. Mas estou aqui se precisar de outras an√°lises! üëç");
            } catch (e: any) { // Especificar tipo para 'e'
                logger.error(`${handlerTAG} Falha ao enviar mensagem de erro do Radar Tuca para User ${userId}:`, e);
            }
        }
        if (userId) { 
            await stateService.updateDialogueState(userId, { lastRadarAlertType: 'error_processing_radar', lastInteraction: Date.now() });
        }
        
        return NextResponse.json({ error: `Failed to process Radar Tuca: ${error instanceof Error ? error.message : String(error)}` }, { status: 500 });
    }
}
